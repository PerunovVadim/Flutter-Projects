import 'package:final_application/cubit/weather_states.dart';
import 'package:final_application/database/database_provider.dart';
import 'package:final_application/models/weather_data.dart';
import 'package:final_application/weatherAPI/open_weather_api.dart';
import 'package:flutter_bloc/flutter_bloc.dart';


import '../models/autogenerated.dart';



class WeatherCubit extends Cubit<WeatherState> {
  final OpenWeatherAPI weatherAPI;

  WeatherCubit({required this.weatherAPI}) : super(WeatherInitial());

  Future<void> fetchWeather(String cityName) async {
    if (cityName.isEmpty) return;

    emit(WeatherLoading());

    try {
      final data = await weatherAPI.getWeather(cityName.trim());
      
      if (data.list == null || data.list!.isEmpty) {
        emit(WeatherError('Город не найден'));
      } else {
        final cityWeather = data.list!.first;
        await _saveWeatherToHistory(cityWeather);
        emit(WeatherLoaded(data));
        
      }
    } catch (e) {
      emit(WeatherError('Ошибка: ${e.toString()}'));
    }
  }

  Future<void> _saveWeatherToHistory(WeatherData cityWeather) async {
    final weather = cityWeather.weather?.first;
    await DatabaseProvider.db.addWeatherRecord({
      'city_name': cityWeather.name,
      'temperature': cityWeather.main?.temp,
      'feels_like': cityWeather.main?.feelsLike,
      'humidity': cityWeather.main?.humidity,
      'pressure': cityWeather.main?.pressure,
      'wind_speed': cityWeather.wind?.speed,
      'weather_description': weather?.description,
      'icon_code': weather?.icon,
      'country_code': cityWeather.sys?.country,
    });
  }
}